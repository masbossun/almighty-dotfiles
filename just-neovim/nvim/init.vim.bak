set nocp
filetype off

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'

Plugin 'dart-lang/dart-vim-plugin'
Plugin 'thosakwe/vim-flutter'
Plugin 'neoclide/coc.nvim'
Plugin 'neoclide/coc-neco'
Plugin 'Shougo/neco-vim'
Plugin 'tpope/vim-commentary'
Plugin 'bronson/vim-trailing-whitespace'
Plugin 'jiangmiao/auto-pairs'
Plugin 'godlygeek/tabular'
Plugin 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }
Plugin 'wakatime/vim-wakatime'
Plugin 'leafgarland/typescript-vim'
Plugin 'maxmellon/vim-jsx-pretty'
Plugin 'HerringtonDarkholme/yats.vim'
Plugin 'jparise/vim-graphql'

Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'chrisbra/colorizer'
Plugin 'itchyny/lightline.vim'
Plugin 'dylanaraps/wal.vim'
Plugin 'majutsushi/tagbar'
Plugin 'mhinz/vim-startify'
Plugin 'Yggdroot/indentLine'

call vundle#end()
filetype plugin indent on

syntax on
set    expandtab
set    tabstop=2
set    shiftwidth=2
set    softtabstop=2
set    mouse=a
:set   number               relativenumber
:set   nowrap
set    hlsearch
set    signcolumn=yes
:set   noruler
set    hidden
set    cmdheight=1
set    updatetime=300
set    shortmess+=c
set    swapfile
set    formatoptions=tcrq
set    textwidth=80
set    number               background=dark
set    laststatus=0
set    wildmenu
set    matchpairs+=<:>
set    incsearch
set    autoindent
set    smartindent
filetype indent on
highlight VertSplit guibg=Orange guifg=Black ctermbg=0 ctermfg=0
" highlight Comment ctermfg=13
highlight OverLength ctermbg=magenta ctermfg=black
match OverLength /\%81v\+/
set foldmethod=marker
hi Folded ctermfg=white ctermbg=none
hi LineNr ctermbg=NONE ctermfg=darkgrey
hi TabLine      ctermfg=254 ctermbg=238 cterm=none
hi TabLineSel   ctermfg=231 ctermbg=235 cterm=bold
hi TabLineFill  ctermfg=254 ctermbg=238 cterm=none

colorscheme wal

set dir=/home/masbossun/temp

" Yank to clipboard
function! ClipboardYank()
  call system('xclip -i -selection clipboard', @@)
endfunction

" Paste from clipboard
function! ClipboardPaste()
  let @@ = system('xclip -o -selection clipboard')
endfunction

:let mapleader='`'

vnoremap <silent> y y:call ClipboardYank()<cr>
vnoremap <silent> d d:call ClipboardYank()<cr>
nnoremap <silent> p :call ClipboardPaste()<cr>p
onoremap <silent> y y:call ClipboardYank()<cr>
onoremap <silent> d d:call ClipboardYank()<cr>

nmap <leader>/ :Commentary<CR>
vmap <leader>/ :Commentary<CR>
nmap ,n :NERDTreeFind<CR>
nmap ,m :NERDTreeToggle<CR>
nmap <F8> :TagbarToggle<CR>
nnoremap <esc><esc> :noh<return>
nmap ff :Prettier<CR>
nmap FF :Format<CR>
nmap cc :ColorHighlight<CR>
nmap <C-S> <Left> :vertical resize +5<CR>
nmap <C-S> <Right> :vertical resize -5<CR>

" Tab navigation like Browser.
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-t>     :tabnew<CR>
nnoremap <C-w>     :tabclose<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>
nnoremap <A-1> 1gt
nnoremap <A-2> 2gt
nnoremap <A-3> 3gt
nnoremap <A-4> 4gt
nnoremap <A-5> 5gt
nnoremap <A-6> 6gt
nnoremap <A-7> 7gt
nnoremap <A-8> 8gt
nnoremap <A-9> 9gt
nnoremap <A-0> 10gt

noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-]> <C-w>]
noremap <C-[> <C-w>[

imap ^[OA <ESC>ki
imap ^[OB <ESC>ji
imap ^[OC <ESC>li
imap ^[OD <ESC>hi

let NERDTreeQuitOnOpen              = 0
let NERDTreeMinimalUI               = 1
let NERDTreeDirArrows               = 1
let NERDTreeShowHidden              = 1
let g:NERDTreeDirArrowExpandable    = ''
let g:NERDTreeDirArrowCollapsible   = ''
autocmd StdinReadPre * let s:std_in = 1

let g:vim_jsx_pretty_highlight_close_tag = 1
let g:vim_jsx_pretty_colorful_config     = 1

" DART
let dart_format_on_save = 1
" automatic Dart file type detection
au BufRead,BufNewFile *.dart set filetype=dart

command! -nargs=0 Prettier :CocCommand prettier.formatFile

" COC

" Use tab for trigger completion with characters ahead and navigate.
" " Use command ':verbose imap <tab>' to make sure tab is not mapped by other
" plugin.
inoremap <silent><expr> <TAB>
	\ pumvisible() ? "\<C-n>" :
	\ <SID>check_back_space() ? "\<TAB>" :
	\ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> for trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> for confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[c` and `]c` for navigate diagnostics
nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K for show documentation in preview window
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if &filetype == 'vim'
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight symbol under cursor on CursorHold
autocmd CursorHold * silent call CocActionAsync('highlight')

" Remap for rename current word
nmap <leader>rn <Plug>(coc-rename)

" Remap for format selected region
vmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
vmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap for do codeAction of current line
nmap <leader>ac  <Plug>(coc-codeaction)
" Fix autofix problem of current line
nmap <leader>qf  <Plug>(coc-fix-current)

" Use `:Format` for format current buffer
command! -nargs=0 Format :call CocAction('format')

" Use `:Fold` for fold current buffer
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" STARTIFY
function! s:center(lines) abort
      let longest_line   = max(map(copy(a:lines), 'strwidth(v:val)'))
      let centered_lines = map(copy(a:lines),
            \ 'repeat(" ", (&columns / 2) - (longest_line / 2)) . v:val')
      return centered_lines
    endfunction


" 'Most Recent Files' number
let g:startify_files_number           = 18

" Update session automatically as you exit vim
let g:startify_session_persistence    = 1

" Simplify the startify list to just recent files and sessions
let g:startify_lists = [
  \ { 'type': 'dir',       'header': ['   Recent files'] },
  \ { 'type': 'sessions',  'header': ['   Saved sessions'] },
  \ ]

" Fancy custom header
let g:startify_custom_header = [
      \ '    _____ _____ _____ _____ _____ _____ _____ _____ _____',
      \ '   |     |  _  |   __| __  |     |   __|   __|  |  |   | |',
      \ '   | | | |     |__   | __ -|  |  |__   |__   |  |  | | | |',
      \ '   |_|_|_|__|__|_____|_____|_____|_____|_____|_____|_|___|',
  \ ]


" " Add diagnostic info for https://github.com/itchyny/lightline.vim
" let g:lightline = {
"       \ 'colorscheme': 'wombat',
"       \ 'active': {
"       \   'left': [ [ 'mode', 'paste'  ],
"       \             [ 'cocstatus', 'readonly', 'filename', 'modified'  ] ]
"       \ },
"       \ 'component_function': {
"       \   'cocstatus': 'coc#status'
"       \ },
"       \ }

" Using CocList
" Show all diagnostics
nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions
nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
" Show commands
nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document
nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols
nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list
nnoremap <silent> <space>p  :<C-u>CocListResume<CR>"
